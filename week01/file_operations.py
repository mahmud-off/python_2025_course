#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏ –≤ Python
"""

import csv
import glob
import json
import os
import zipfile
from pathlib import Path

# ========================
# 1. –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ (Read)
# ========================


def read_file_basic(filename: str) -> None:
    """–ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–æ—Å—Ç—Ä–æ—á–Ω–æ"""
    print("=== –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–æ—Å—Ç—Ä–æ—á–Ω–æ ===")
    try:
        with open(filename, "r", encoding="utf-8") as file:
            for line in file:
                print(f"–°—Ç—Ä–æ–∫–∞: {line.strip()}")
    except FileNotFoundError:
        print(f"–§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω")


def read_file_all(filename: str) -> None:
    """–ß—Ç–µ–Ω–∏–µ –≤—Å–µ–≥–æ —Ñ–∞–π–ª–∞ —Å—Ä–∞–∑—É"""
    print("\n=== –ß—Ç–µ–Ω–∏–µ –≤—Å–µ–≥–æ —Ñ–∞–π–ª–∞ ===")
    try:
        with open(filename, "r", encoding="utf-8") as file:
            content = file.read()
            print(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞:\n{content}")
    except FileNotFoundError:
        print(f"–§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω")


def read_file_lines(filename: str) -> None:
    """–ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫"""
    print("\n=== –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ ===")
    try:
        with open(filename, "r", encoding="utf-8") as file:
            lines = file.readlines()
            print(f"–°—Ç—Ä–æ–∫ –≤ —Ñ–∞–π–ª–µ: {len(lines)}")
            for i, line in enumerate(lines[:3]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Å—Ç—Ä–æ–∫–∏
                print(f"{i+1}: {line.strip()}")
    except FileNotFoundError:
        print(f"–§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω")


# ========================
# 2. –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª (Write)
# ========================


def write_file_basic(filename: str, content: str) -> None:
    """–ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª (–ø–µ—Ä–µ–∑–∞–ø–∏—Å—å)"""
    print("\n=== –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª (–ø–µ—Ä–µ–∑–∞–ø–∏—Å—å) ===")
    try:
        with open(filename, "w", encoding="utf-8") as file:
            file.write(content)
        print(f"–î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ {filename}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏: {e}")


def append_to_file(filename: str, content: str) -> None:
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞"""
    print("\n=== –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞ ===")
    try:
        with open(filename, "a", encoding="utf-8") as file:
            file.write(content + "\n")
        print(f"–î–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ {filename}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {e}")


def write_multiple_lines(filename: str, lines_list: str) -> None:
    """–ó–∞–ø–∏—Å—å –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å—Ç—Ä–æ–∫"""
    print("\n=== –ó–∞–ø–∏—Å—å –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å—Ç—Ä–æ–∫ ===")
    try:
        with open(filename, "w", encoding="utf-8") as file:
            for line in lines_list:
                file.write(line + "\n")
        print(f"–ó–∞–ø–∏—Å–∞–Ω–æ {len(lines_list)} —Å—Ç—Ä–æ–∫ –≤ {filename}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏: {e}")


# ========================
# 3. –†–∞–±–æ—Ç–∞ —Å JSON
# ========================


def json_example() -> None:
    """–ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å JSON"""
    print("\n=== –†–∞–±–æ—Ç–∞ —Å JSON ===")

    # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    data = {
        "name": "–ê–ª–µ–∫—Å–µ–π",
        "age": 25,
        "hobbies": ["—á—Ç–µ–Ω–∏–µ", "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è"],
        "address": {"city": "–ú–æ—Å–∫–≤–∞", "street": "–õ–µ–Ω–∏–Ω–∞ 10"},
    }

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    with open("data.json", "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

    print("JSON –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ data.json")

    # –ß–∏—Ç–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
    with open("data.json", "r", encoding="utf-8") as f:
        loaded_data = json.load(f)
        print("–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
        print(json.dumps(loaded_data, ensure_ascii=False, indent=2))


# ========================
# 4. –ü–∞—Ä—Å–∏–Ω–≥ CSV —Ñ–∞–π–ª–æ–≤
# ========================


def csv_example() -> None:
    """–ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å CSV"""
    print("\n=== –†–∞–±–æ—Ç–∞ —Å CSV ===")

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä CSV —Ñ–∞–π–ª–∞
    csv_data = [
        ["–ò–º—è", "–í–æ–∑—Ä–∞—Å—Ç", "–ì–æ—Ä–æ–¥"],
        ["–ê–Ω–Ω–∞", "28", "–°–ü–±"],
        ["–ü–µ—Ç—Ä", "32", "–ú–æ—Å–∫–≤–∞"],
        ["–ú–∞—Ä–∏—è", "24", "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫"],
    ]

    with open("people.csv", "w", newline="", encoding="utf-8") as file:
        writer = csv.writer(file)
        writer.writerows(csv_data)

    print("CSV —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: people.csv")

    # –ß–∏—Ç–∞–µ–º CSV
    with open("people.csv", "r", encoding="utf-8") as file:
        reader = csv.reader(file)
        header = next(reader)  # –ß–∏—Ç–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        print(f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {header}")

        print("–î–∞–Ω–Ω—ã–µ:")
        for row in reader:
            print(f"  {row}")


# ========================
# 5. –†–∞–±–æ—Ç–∞ —Å –ø–∞–ø–∫–∞–º–∏ –∏ —Ñ–∞–π–ª–∞–º–∏
# ========================


def folder_operations() -> None:
    """–ü—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç—ã —Å –ø–∞–ø–∫–∞–º–∏"""
    print("\n=== –†–∞–±–æ—Ç–∞ —Å –ø–∞–ø–∫–∞–º–∏ ===")

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    os.makedirs("test_folder/subfolder", exist_ok=True)

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
    with open("test_folder/file1.txt", "w") as f:
        f.write("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–µ—Ä–≤–æ–≥–æ —Ñ–∞–π–ª–∞")

    with open("test_folder/subfolder/file2.txt", "w") as f:
        f.write("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤—Ç–æ—Ä–æ–≥–æ —Ñ–∞–π–ª–∞")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏
    print("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ test_folder:")
    for root, dirs, files in os.walk("test_folder"):
        level = root.replace("test_folder", "").count(os.sep)
        indent = " " * 2 * level
        print(f"{indent}{os.path.basename(root)}/")
        subindent = " " * 2 * (level + 1)
        for file in files:
            print(f"{subindent}{file}")

    # –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤
    print("\n–ü–æ–∏—Å–∫ –≤—Å–µ—Ö .txt —Ñ–∞–π–ª–æ–≤:")
    txt_files = glob.glob("test_folder/**/*.txt", recursive=True)
    for file in txt_files:
        print(f"  {file}")


def file_info(filename: str) -> None:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ"""
    print(f"\n=== –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ: {filename} ===")
    try:
        stat = os.stat(filename)
        print(f"–†–∞–∑–º–µ—Ä: {stat.st_size} –±–∞–π—Ç")
        print(f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {stat.st_ctime}")
        print(f"–î–∞—Ç–∞ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏: {stat.st_mtime}")
    except FileNotFoundError:
        print(f"–§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω")


# ========================
# 6. –†–∞–±–æ—Ç–∞ —Å –ø—É—Ç—è–º–∏
# ========================


def path_operations() -> None:
    """–ü—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç—ã —Å –ø—É—Ç—è–º–∏"""
    print("\n=== –†–∞–±–æ—Ç–∞ —Å –ø—É—Ç—è–º–∏ ===")

    # –°–æ–∑–¥–∞–µ–º –ø—É—Ç—å
    current_path = Path(".")
    print(f"–¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {current_path.absolute()}")

    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
    file_path = Path("test_folder/file1.txt")
    print(f"–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É: {file_path}")
    print(f"–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ: {file_path.suffix}")
    print(f"–ò–º—è —Ñ–∞–π–ª–∞: {file_path.name}")
    print(f"–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –ø–∞–ø–∫–∞: {file_path.parent}")

    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—É—Ç–∏
    new_path = Path("new_folder") / "data.txt"
    print(f"–ù–æ–≤—ã–π –ø—É—Ç—å: {new_path}")


# ========================
# 7. –†–∞–±–æ—Ç–∞ —Å –∞—Ä—Ö–∏–≤–∞–º–∏
# ========================


def archive_example() -> None:
    """–ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å –∞—Ä—Ö–∏–≤–∞–º–∏"""
    print("\n=== –†–∞–±–æ—Ç–∞ —Å –∞—Ä—Ö–∏–≤–∞–º–∏ ===")

    # –°–æ–∑–¥–∞–µ–º zip –∞—Ä—Ö–∏–≤
    with zipfile.ZipFile("test_archive.zip", "w") as zipf:
        zipf.write("test_folder/file1.txt", "file1.txt")
        zipf.write("test_folder/subfolder/file2.txt", "subfolder/file2.txt")

    print("–°–æ–∑–¥–∞–Ω –∞—Ä—Ö–∏–≤ test_archive.zip")

    # –†–∞—Å–ø–∞–∫–æ–≤–∫–∞
    with zipfile.ZipFile("test_archive.zip", "r") as zipf:
        zipf.extractall("extracted")

    print("–ê—Ä—Ö–∏–≤ —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω –≤ extracted/")


# ========================
# 8. –†–∞–±–æ—Ç–∞ —Å –æ—à–∏–±–∫–∞–º–∏
# ========================


def safe_file_operations() -> None:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏"""
    print("\n=== –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏ ===")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
    filename = "test_file.txt"

    if os.path.exists(filename):
        print(f"–§–∞–π–ª {filename} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        try:
            with open(filename, "r") as f:
                content = f.read()
                print(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞: {content[:50]}...")
        except PermissionError:
            print("–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
    else:
        print(f"–§–∞–π–ª {filename} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        # –°–æ–∑–¥–∞–µ–º –µ–≥–æ
        with open(filename, "w") as f:
            f.write("–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª\n–°–æ–∑–¥–∞–Ω –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—É—á–µ–Ω–∏—è")
        print("–§–∞–π–ª —Å–æ–∑–¥–∞–Ω")


# ========================
# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
# ========================


def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print("üéì –ü—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏ –≤ Python")
    print("=" * 50)

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è —á—Ç–µ–Ω–∏—è
    test_content = """–≠—Ç–æ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞
–≠—Ç–æ –≤—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞
–≠—Ç–æ —Ç—Ä–µ—Ç—å—è —Å—Ç—Ä–æ–∫–∞
–≠—Ç–æ —á–µ—Ç–≤–µ—Ä—Ç–∞—è —Å—Ç—Ä–æ–∫–∞"""

    write_file_basic("test_read.txt", test_content)

    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–∏–º–µ—Ä—ã
    read_file_basic("test_read.txt")
    read_file_all("test_read.txt")
    read_file_lines("test_read.txt")

    # –ó–∞–ø–∏—Å—å —Ñ–∞–π–ª–æ–≤
    write_file_basic("output.txt", "–ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞\n–í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞")
    append_to_file("output.txt", "–¢—Ä–µ—Ç—å—è —Å—Ç—Ä–æ–∫–∞")

    # JSON –ø—Ä–∏–º–µ—Ä
    json_example()

    # CSV –ø—Ä–∏–º–µ—Ä
    csv_example()

    # –ü–∞–ø–∫–∏ –∏ —Ñ–∞–π–ª—ã
    folder_operations()
    file_info("test_read.txt")

    # –ü—É—Ç–∏
    path_operations()

    # –ê—Ä—Ö–∏–≤—ã
    archive_example()

    # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    safe_file_operations()

    # –û—á–∏—Å—Ç–∫–∞
    print("\n=== –û—á–∏—Å—Ç–∫–∞ ===")
    try:
        os.remove("test_read.txt")
        os.remove("output.txt")
        os.remove("data.json")
        os.remove("people.csv")
        os.remove("test_archive.zip")
        os.removedirs("extracted")
        os.removedirs("test_folder/subfolder")
        os.rmdir("test_folder")
        os.rmdir("new_folder")
        print("–í—Å–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã")
    except Exception:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã")


if __name__ == "__main__":
    main()
